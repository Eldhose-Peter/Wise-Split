services:
  postgres:
    container_name: postgres-db
    image: postgres:latest
    restart: always
    hostname: localhost
    ports:
      - "5433:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: devdb
    volumes:
      - ./pg-data:/var/lib/postgresql/data
    networks:
      - wise-split-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d postgres"]
      interval: 5s
      timeout: 2s
      retries: 20

  prisma-studio:
    image: node:lts-alpine3.17
    working_dir: /usr/src/app
    volumes:
      - .:/usr/src/app
    command: npx prisma studio --port 5555 --browser none
    ports:
      - "5555:5555"
    environment:
      DATABASE_URL: postgres://postgres:postgres@postgres-db:5433/devdb
    networks:
      - wise-split-network
    depends_on:
      postgres:
        condition: service_healthy

  # redis:
  #   container_name: redis-cache
  #   image: redis:latest
  #   restart: always
  #   ports:
  #     - "6380:6379"
  #   networks:
  #     - wise-split-network

  backend:
    container_name: backend-service
    build:
      context: ./
      dockerfile: Dockerfile
    restart: always
    ports:
      - "3001:3001"
    environment:
      DATABASE_URL: postgres://postgres:postgres@postgres-db:5433/devdb
      REDIS_URL: redis://redis-cache:6380
      JWT_SECRET: your_jwt_secret
      PORT: 3001
      FRONTEND_URL: http://localhost:3000
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - wise-split-network

  client:
    container_name: client-service
    build:
      context: ./client
      dockerfile: Dockerfile
    restart: always
    ports:
      - "3000:80"
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:3001/api
    depends_on:
      - backend
    networks:
      - wise-split-network

networks:
  wise-split-network:
    driver: bridge
